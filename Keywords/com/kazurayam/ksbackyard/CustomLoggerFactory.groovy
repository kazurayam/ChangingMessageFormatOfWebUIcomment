package com.kazurayam.ksbackyard

import org.slf4j.ILoggerFactory
import org.slf4j.LoggerFactory;

import com.kms.katalon.core.annotation.Keyword

import ch.qos.logback.classic.Level
import ch.qos.logback.classic.Logger
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.encoder.PatternLayoutEncoder
import ch.qos.logback.core.ConsoleAppender
import ch.qos.logback.core.FileAppender

public class CustomLoggerFactory {

	private static Logger logger = LoggerFactory.getLogger(CustomLoggerFactory.class);

	public static final CLASSNAME_COMMENT_KEYWORD = 'com.kms.katalon.core.keyword.builtin.CommentKeyword'
	public static final PATTERN                   = /com\.kms\.katalon\.core\.keyword\.builtin\.CommentKeyword/

	/**
	 * This keyword modifies the Logback config used by Katalon Studio on the fly as if it were
	 * generated by the following XML. This emits messages in Console in the message-only format. 
	 * 
	 * <PRE>
	 * <configuration>
	 *   <appender name="msgOnly2Console" class="ch.qos.logback.core.ConsoleAppender">
	 *     <encoder>
	 *       <pattern>%msg%n</pattern>
	 *     </encoder>
	 *   </appender>
	 *   <logger name="com.kms.katalon.core.keyword.builtin.CommentKeyword" level="info" additivity="false">
	 *     <appender-ref ref="msgOnly2Console" />
	 *   </logger>
	 * </configuration>
	 * </PRE>
	 */
	@Keyword
	public static void customizeCommentKeyword4MsgOnly2Console() {
		LoggerFactory.metaClass.static.getLogger = { String name ->
			if (name =~ PATTERN) {
				return getCommentKeywordLogger4msgOnly2Console()
			} else {
				ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory()
				return iLoggerFactory.getLogger(name);
			}
		}
		// the following line is required
		org.slf4j.Logger log = LoggerFactory.getLogger(CLASSNAME_COMMENT_KEYWORD)
	}

	private static Logger getCommentKeywordLogger4msgOnly2Console() {
		LoggerContext logCtx = ((ch.qos.logback.classic.Logger)logger).getLoggerContext()
		//
		PatternLayoutEncoder msgOnlyEncoder = new PatternLayoutEncoder()
		msgOnlyEncoder.setContext(logCtx)
		msgOnlyEncoder.setPattern("%msg%n")
		msgOnlyEncoder.start()
		//
		ConsoleAppender msgOnly2ConsoleAppender = new ConsoleAppender()
		msgOnly2ConsoleAppender.setContext(logCtx)
		msgOnly2ConsoleAppender.setName("msgOnly2Console")
		msgOnly2ConsoleAppender.setEncoder(msgOnlyEncoder)
		msgOnly2ConsoleAppender.start()
		//
		Logger logger = logCtx.getLogger(CLASSNAME_COMMENT_KEYWORD)
		logger.additive = false
		logger.level = Level.INFO
		logger.addAppender(msgOnly2ConsoleAppender)
		//
		return logger
	}



	/**
	 * This keyword modifies the Logback config used by Katalon Studio on the fly as if it were
	 * generated by the following XML. It appends messages into a file in the "level msg" format.
	 * <PRE>
	 * <configuration>
	 *   <appender name="levelAndMsg2File" class="ch.qos.logback.core.FileAppender">
	 *     <file>testFile.log</file>
	 *     <append>true</append>
	 *     <!-- set immediateFlush to false for much higher logging throughput -->
	 *     <immediateFlush>true</immediateFlush>
	 *     <!-- encoders are assigned the type
	 *          ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->
	 *     <encoder>
	 *       <!-- <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{42} - %msg%n</pattern> -->
	 *       <pattern>%-5level %msg%n</pattern>
	 *     </encoder>
	 *   </appender>
	 *   <logger name="com.kms.katalon.core.keyword.builtin.CommentKeyword" level="info" additivity="false">
	 *     <appender-ref ref="levelAndMsg2File" />
	 *   </logger>
	 * </configuration>
	 * </PRE>
	 */
	@Keyword
	public static void customizeCommentKeyword4levelAndMsg2File(File output) {
		Objects.requireNonNull(output, "output must not be null")
		ensureParentDirs(output)
		LoggerFactory.metaClass.static.getLogger = { String name ->
			if (name =~ PATTERN) {
				return getCommentKeywordLogger4levelAndMsg2File(output)
			} else {
				ILoggerFactory iLoggerFactory = LoggerFactory.getILoggerFactory()
				return iLoggerFactory.getLogger(name);
			}
		}
		// the following line is necessary to acknowledge the LoggerFactory of the custom Logger instance for the WebUI.comment keyword
		org.slf4j.Logger log = LoggerFactory.getLogger(CLASSNAME_COMMENT_KEYWORD)
	}

	private static Logger getCommentKeywordLogger4levelAndMsg2File(File output) {
		LoggerContext logCtx = ((ch.qos.logback.classic.Logger)logger).getLoggerContext()
		//
		//PatternLayoutEncoder asKatalonStudioEncoder = new PatternLayoutEncoder()
		//asKatalonStudioEncoder.setContext(logCtx)
		//asKatalonStudioEncoder.setPattern("%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{42} - %msg%n")
		//asKatalonStudioEncoder.start()
		//
		PatternLayoutEncoder levelAndMsgEncoder = new PatternLayoutEncoder()
		levelAndMsgEncoder.setContext(logCtx)
		levelAndMsgEncoder.setPattern("%-5level %msg%n")
		//
		FileAppender levelAndMsg2FileAppender = new FileAppender()
		levelAndMsg2FileAppender.setContext(logCtx)
		levelAndMsg2FileAppender.setName("levelAndMsg2File")
		levelAndMsg2FileAppender.setFile(output.toString())
		levelAndMsg2FileAppender.setAppend(true)
		levelAndMsg2FileAppender.setImmediateFlush(true)
		levelAndMsg2FileAppender.setEncoder(levelAndMsgEncoder)
		levelAndMsg2FileAppender.start()
		//
		Logger logger = logCtx.getLogger(CLASSNAME_COMMENT_KEYWORD)
		logger.additive = false
		logger.level = Level.INFO
		logger.addAppender(levelAndMsg2FileAppender)
		//
		return logger
	}


	private static void ensureParentDirs(File file) {
		File parentDir = file.getParentFile()
		if ( !parentDir.exists() ) {
			boolean b = parentDir.mkdirs()
			if ( ! b ) {
				throw new IOException("failed to create ${parentDir.toString()}")
			}
		}
	}
}
